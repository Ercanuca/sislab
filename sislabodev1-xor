import matplotlib.pyplot as plt
import numpy as np
giris = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])
cikis_AND = np.array([1, 0, 0, 0]) # and
cikis_OR = np.array([1, 1, 1, 0]) #or

giris_NOT= np.array([[1],[0]])
cikis_NOT= np.array([0,1])
# credits for this class: Aashir Javed
# Available on GitHub : github.com/aashirjaved
# Repo: Perceptron-Machine-Learning-Using-Python-
# File: Perceptron.py

class Perceptron(object): 
    def __init__(self, ogrenme_orani=0.1, iter_sayisi=10):
        self.ogrenme_orani = ogrenme_orani
        self.iter_sayisi = iter_sayisi

    def ogren(self, X, y):
        self.w = np.zeros(1 + X.shape[1])
        #self.hatalar = []
        for _ in range(self.iter_sayisi):
            #hata = 0
            for xi, hedef in zip(X, y):
                degisim = self.ogrenme_orani * (hedef - self.tahmin(xi))
                self.w[1:] += degisim * xi
                self.w[0] += degisim
                #hata += int(degisim != 0.0)
            #self.hatalar.append(hata)
        return self

    def net_input(self, X):
        return np.dot(X, self.w[1:]) + self.w[0]

    def tahmin(self, x):
        a = np.where(self.net_input(x) >= 0.0, 1, 0)
        return adef XOR(x):
  siniflandirici_AND = Perceptron(ogrenme_orani=0.1, iter_sayisi=10)
  siniflandirici_NOT = Perceptron(ogrenme_orani=0.1, iter_sayisi=10)
  siniflandirici_OR = Perceptron(ogrenme_orani=0.1, iter_sayisi=10)

  
  siniflandirici_AND.ogren(giris, cikis_AND)
  siniflandirici_NOT.ogren(giris_NOT,cikis_NOT )
  siniflandirici_OR.ogren(giris, cikis_OR)

  sonuc_AND = siniflandirici_AND.tahmin(x)
  sonuc_AND_NOT = siniflandirici_NOT.tahmin(sonuc_AND)
  sonuc_OR = siniflandirici_OR.tahmin(x)

  new_x = np.array([sonuc_AND_NOT[0], sonuc_OR])
  return siniflandirici_AND.tahmin(new_x)

for e in giris:
  print(e)
  print(XOR(e))
